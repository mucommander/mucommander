buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:6.1.0'
  }
}

plugins {
    id 'com.athaydes.osgi-run' version '1.6.0'
    id 'java'
    id 'org.ajoberstar.grgit' version '3.1.1'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'edu.sc.seis.launch4j' version '2.4.6'
}

allprojects {
    tasks.withType(JavaCompile).configureEach {
        options.fork = true
    }

    group = 'org.mucommander'
    version = '1.0.1'
    ext.release = 'snapshot'
    configurations {
        compileOnly.extendsFrom comprise
    }
}

subprojects {
    apply plugin: 'biz.aQute.bnd.builder'
    apply plugin: 'java-library'
    compileJava.options.compilerArgs += ['--release', '8']
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += ['--release', '8']

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.felix:org.apache.felix.main:6.0.3'
    implementation 'com.beust:jcommander:1.78'

    osgiRuntime project('mucommander-core')
    osgiRuntime project('mucommander-command')
    osgiRuntime project('mucommander-commons-collections')
    osgiRuntime project('mucommander-commons-conf')
    osgiRuntime project('mucommander-commons-file')
    osgiRuntime project('mucommander-commons-io')
    osgiRuntime project('mucommander-commons-runtime')
    osgiRuntime project('apache-bzip2')
    osgiRuntime project('mucommander-encoding')
    osgiRuntime project('mucommander-preferences')
    osgiRuntime project('mucommander-process')
    osgiRuntime project('mucommander-translator')

    osgiRuntime project('mucommander-protocol-ftp')
    osgiRuntime project('mucommander-protocol-sftp')
    osgiRuntime project('mucommander-format-rar')
    osgiRuntime project('mucommander-protocol-http')
    osgiRuntime project('mucommander-protocol-dropbox')
    osgiRuntime project('mucommander-protocol-gdrive')
    osgiRuntime project('mucommander-protocol-nfs')
    osgiRuntime project('mucommander-protocol-smb')
    osgiRuntime project('mucommander-protocol-vsphere')
    osgiRuntime project('mucommander-format-ar')
    osgiRuntime project('mucommander-format-sevenzip')
    osgiRuntime project('mucommander-format-zip')
    osgiRuntime project('mucommander-format-tar')
    osgiRuntime project('mucommander-format-bzip2')
    osgiRuntime project('mucommander-format-gzip')
    osgiRuntime project('mucommander-format-xz')
    osgiRuntime project('mucommander-format-iso')
    osgiRuntime project('mucommander-format-lst')
    osgiRuntime project('mucommander-archiver')
//    osgiRuntime project('mucommander-hadoop')
    osgiRuntime project('mucommander-protocol-s3')
    osgiRuntime project('mucommander-protocol-registry')
    osgiRuntime project('mucommander-protocol-ovirt')
    osgiRuntime project('mucommander-format-libguestfs') // Note that this is a work-in-progress

    osgiRuntime project('mucommander-viewer-text')
    osgiRuntime project('mucommander-viewer-image')
    osgiRuntime project('mucommander-viewer-pdf')
    osgiRuntime project('mucommander-viewer-binary')

    osgiRuntime project('mucommander-os-api')
    osgiRuntime project('mucommander-os-macos')
    // osgiRuntime project('mucommander-os-macos-java8')
    osgiRuntime project('mucommander-os-linux')
    osgiRuntime project('mucommander-os-win')
    osgiRuntime project('mucommander-os-openvms')
}

createBundlesDir.doLast {
   ant.move file: "${buildDir}/osgi/bundle/${project('mucommander-core').jar.archiveName}",
            todir: "${buildDir}/osgi/app"
   copy {
       from "build/libs"
       include project(':').jar.archiveName
       into "${buildDir}/osgi"
   }
   copy {
       from "package"
       include "logback.xml"
       into "${buildDir}/osgi/conf"
   }
}

runOsgi {
    javaArgs = '-Djava.library.path=/usr/local/lib' // for Libguestfs
    def port = System.getenv('DEBUG')
    if (port) {
        javaArgs += ' -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=' + port
    }
    javaArgs += ' --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-exports java.desktop/com.apple.eawt=ALL-UNNAMED --add-exports java.desktop/com.apple.laf=ALL-UNNAMED  --add-exports java.desktop/com.apple.eio=ALL-UNNAMED'
    configSettings = 'felix'
    osgiMain = project(':')
    config += [
        'org.osgi.framework.storage': 'felix-cache',
        'felix.auto.deploy.dir': 'bundle',
        'mucommander.app.dir': 'app',
        'mucommander.conf.dir': 'conf',
    ]
    wrapInstructions {
        manifest("httpclient.*") {
            // enable httpclient to instantiate factories that reside in jets3t
            instruction 'DynamicImport-Package', 'org.jets3t.service.utils', '*'
        }
        manifest("sdk-.*") {
            instruction 'Bundle-Name', 'ovirt-sdk'
        }
        manifest("google-api-services.*") {
            instruction 'Bundle-Version', '1.23.0'
        }
        manifest("google-oauth-client-[0-9].*") {
            instruction 'Export-Package', 'com.google.api.client.auth.oauth2', '*'
        }
        manifest("google-http-client.*") {
            instruction 'Import-Package', 'com.google.api.client.auth.oauth2', '*'
        }
    }
}

task run(dependsOn: 'runOsgi')

ext {
    // Open the Git repository in the project's root directory.
    git = grgit.open(dir: project.rootDir)
    // Get commit id of HEAD.
    revision = git.head().id
    // Whether or not to bundle the JRE in order to create a 'standalone' executable
    bundleJRE = project.hasProperty('mucommanderBundleJRE') ? mucommanderBundleJRE.toBoolean() : false
}

shadowJar.archiveClassifier = null

jar {
    manifest {
        attributes("Main-Class": "com.mucommander.main.muCommander",
                   "Specification-Title": "muCommander",
                   "Specification-Vendor": "Arik Hadas",
                   "Specification-Version": project.version+'-'+project.ext.release,
                   "Implementation-Title": "muCommander",
                   "Implementation-Vendor": "Arik Hadas",
                   "Implementation-Version": revision.substring(0, 7),
                   "Build-Date": new Date().format('yyyyMMdd'),
                   "Build-URL": "https://www.mucommander.com/version/nightly.xml")
    }
}

jar.enabled = false

test.useTestNG()

import org.apache.tools.ant.filters.ReplaceTokens

launch4j {
    icon = "$projectDir/package/windows/mucommander.ico"
    mainClassName = "com.mucommander.main.muCommander"
    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "${project.tasks.shadowJar.archiveFileName.get()}"
    dontWrapJar = true
    classpath = ['.']
    headerType = "gui"
    jreMinVersion = "1.8"
    if (project.ext.bundleJRE) {
        bundledJre64Bit = true
        bundledJrePath = "jre"
    } else {
        bundledJrePath = '%JAVA_HOME%'
        bundledJreAsFallback = true
    }
    outfile = "mucommander.exe"
}

// Portable packaging
task portable(dependsOn: [createExe, createBundlesDir], type: Zip) {
    from ("$buildDir/launch4j") {
        include 'mucommander.exe'
    }
    from ("$buildDir/osgi") {
        include '*.jar'
    }
    from ('package') { include 'license.txt', 'readme.txt' }
    def tempDir = File.createTempDir()
    tempDir.deleteOnExit()
    from ({ new File(temporaryDir, '.portable').createNewFile(); new File(temporaryDir, 'felix-cache').mkdirs(); temporaryDir }) {
        include '.portable'
        include 'felix-cache'
        dirMode 0777
    }
    from ('package/unix/mucommander.sh') {
        filter(ReplaceTokens, tokens: [MU_VERSION: project.version])
    }
    into ""
    from ("$buildDir/osgi/bundle") {
        include '*.jar'
        exclude 'osgiaas*'
        exclude 'jline*'
        into 'bundle'
    }
    from ("$buildDir/osgi/app") {
        include '*.jar'
        into 'app'
    }
    from ("$buildDir/osgi/conf") {
        include '*'
        into 'conf'
    }

    archiveClassifier = 'portable'
    archiveVersion = project.version+'-'+project.ext.release
}

// Unix packaging
task tgz(dependsOn: createBundlesDir, type: Tar) {
    from ("$buildDir/osgi") {
        include '*.jar'
    }
    from ('package') { include 'license.txt', 'readme.txt' }
    def tempDir = File.createTempDir()
    tempDir.deleteOnExit()
    from ({ new File(temporaryDir, 'felix-cache').mkdirs(); temporaryDir }) {
        include 'felix-cache'
        dirMode 0777
    }
    from ('package/unix/mucommander.sh') {
        filter(ReplaceTokens, tokens: [MU_VERSION: project.version])
    }
    into ""

    from ("$buildDir/osgi/bundle") {
        include '*.jar'
        exclude 'osgiaas*'
        exclude 'jline*'
        into 'bundle'
    }
    from ("$buildDir/osgi/app") {
        include '*.jar'
        into 'app'
    }
    from ("$buildDir/osgi/conf") {
        include '*'
        into 'conf'
    }

    archiveExtension = 'tgz'
    compression = Compression.GZIP
    archiveVersion = project.version+'-'+project.ext.release
}

task(afterEclipseImport).doLast {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding//src/main/resources/languages.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ar.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_be.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ca.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_cs.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_da.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_de.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_en.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_en_GB.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_es.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_fr.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_hu.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_it.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ja.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ko.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_nb.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_nl.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_pl.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_pt_BR.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ro.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ru.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_sk.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_sl.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_sv.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_tr.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_ua.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_zh_CN.properties=UTF-8\n')
    f.append('encoding//src/main/resources/dictionary_zh_TW.properties=UTF-8\n')
}

task macAppImage(dependsOn: 'createBundlesDir', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--input', 'build/osgi/', \
                '--name', 'muCommander', \
                '--app-version', project.version, \
                '--icon', 'package/osx/icon.icns', \
                '--main-jar', 'mucommander-'+project.version+'.jar', \
                '--main-class', 'com.mucommander.main.muCommander', \
                '--runtime-image', 'jre/macOS', \
                '--java-options', '--add-exports java.desktop/com.apple.laf=ALL-UNNAMED --add-exports java.desktop/com.apple.eio=ALL-UNNAMED --add-exports java.desktop/com.apple.eawt=ALL-UNNAMED --add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.transaction.xa/javax.transaction.xa=ALL-UNNAMED --add-opens java.management/javax.management=ALL-UNNAMED --add-opens java.rmi/java.rmi=ALL-UNNAMED --add-opens java.security.jgss/org.ietf.jgss=ALL-UNNAMED --add-opens java.sql/java.sql=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.http=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.https=ALL-UNNAMED', \
                '--mac-package-identifier', 'com.mucommander.muCommander', \
                '--type', 'app-image', \
                '--dest', "${buildDir}"
    doLast {
       copy {
          from "package"
          include "license.txt"
          include "readme.txt"
          into "${buildDir}/muCommander.app/Contents"
       }
       delete("${buildDir}/muCommander.app/Contents/app/run.bat")
       delete("${buildDir}/muCommander.app/Contents/app/run.sh")
       delete("${buildDir}/muCommander.app/Contents/app/system-libs")
       delete fileTree(dir: "${buildDir}/muCommander.app/Contents/app/bundle/", include: 'osgiaas*')
       delete fileTree(dir: "${buildDir}/muCommander.app/Contents/app/bundle/", include: 'jline*')
       delete fileTree(dir: "${buildDir}/muCommander.app/Contents/app/bundle/", include: 'mucommander-os-linux*')
       delete fileTree(dir: "${buildDir}/muCommander.app/Contents/app/bundle/", include: 'mucommander-os-win*')
       delete fileTree(dir: "${buildDir}/muCommander.app/Contents/app/bundle/", include: 'mucommander-os-openvms*')
       exec {
          executable "package/osx/muCommander-post-image.sh"
       }
    }
}

task dmg(dependsOn: 'macAppImage', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--app-image', "${buildDir}/muCommander.app", \
                '--app-version', project.version, \
                '--license-file', 'package/license.txt', \
                '--about-url', 'https://www.mucommander.com', \
                '--dest', "${buildDir}/distributions"
}

task linuxAppImage(dependsOn: 'createBundlesDir', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--input', 'build/osgi/', \
                '--name', 'muCommander', \
                '--app-version', project.version, \
                '--main-jar', 'mucommander-'+project.version+'.jar', \
                '--main-class', 'com.mucommander.main.muCommander', \
                '--java-options', '--add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.transaction.xa/javax.transaction.xa=ALL-UNNAMED --add-opens java.management/javax.management=ALL-UNNAMED --add-opens java.rmi/java.rmi=ALL-UNNAMED --add-opens java.security.jgss/org.ietf.jgss=ALL-UNNAMED --add-opens java.sql/java.sql=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.http=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.https=ALL-UNNAMED', \
                '--type', 'app-image', \
                '--runtime-image', 'jre/linux', \
                '--dest', "${buildDir}"
    doLast {
        copy {
           from "package"
           include "license.txt"
           include "readme.txt"
           into "${buildDir}/muCommander/lib/app"
        }
        delete fileTree(dir: "${buildDir}/muCommander/lib/app/bundle/", include: 'osgiaas*')
        delete fileTree(dir: "${buildDir}/muCommander/lib/app/bundle/", include: 'jline*')
        delete("${buildDir}/muCommander/lib/app/run.bat")
        delete("${buildDir}/muCommander/lib/app/run.sh")
        delete("${buildDir}/muCommander/lib/app/system-libs")
    }
}

task rpm(dependsOn: 'linuxAppImage', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--type', 'rpm', \
                '--app-image', "${buildDir}/muCommander", \
                '--app-version', project.version, \
                '--license-file', 'package/license.txt', \
                '--about-url', 'https://www.mucommander.com', \
                '--dest', "${buildDir}/distributions", \
                '--icon', 'mucommander-core/src/main/resources/images/mucommander/icon128_24.png', \
                '--linux-app-category', 'Application;FileManager;Utility;'
}


task deb(dependsOn: 'linuxAppImage', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--type', 'deb', \
                '--description', 'a lightweight, cross-platform file manager', \
                '--app-image', "${buildDir}/muCommander", \
                '--app-version', project.version, \
                '--license-file', 'package/license.txt', \
                '--about-url', 'https://www.mucommander.com', \
                '--dest', "${buildDir}/distributions", \
                '--icon', 'mucommander-core/src/main/resources/images/mucommander/icon128_24.png', \
                '--linux-deb-maintainer', 'arik.hadas1@gmail.com', \
                '--linux-app-category', 'utils', \
                '--linux-shortcut', \
                '--linux-menu-group', 'Application;FileManager;Utility;'
}

task winAppImage(dependsOn: 'createBundlesDir', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--input', "${buildDir}/osgi/", \
                '--name', 'muCommander', \
                '--app-version', project.version, \
                '--main-jar', 'mucommander-'+project.version+'.jar', \
                '--main-class', 'com.mucommander.main.muCommander', \
                '--java-options', '--add-opens java.base/java.io=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED --add-opens java.transaction.xa/javax.transaction.xa=ALL-UNNAMED --add-opens java.management/javax.management=ALL-UNNAMED --add-opens java.rmi/java.rmi=ALL-UNNAMED --add-opens java.security.jgss/org.ietf.jgss=ALL-UNNAMED --add-opens java.sql/java.sql=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.http=ALL-UNNAMED --add-opens java.base/sun.net.www.protocol.https=ALL-UNNAMED', \
                '--type', 'app-image', \
                '--runtime-image', 'jre/win', \
                '--dest', "${buildDir}", \
                '--resource-dir', 'package/windows/'
    doLast {
        copy {
           from "package"
           include "license.txt"
           include "readme.txt"
           into "${buildDir}/muCommander/"
        }
        delete("${buildDir}/muCommander/app/run.bat")
        delete("${buildDir}/muCommander/app/run.sh")
        delete("${buildDir}/muCommander/app/system-libs")
        delete fileTree(dir: "${buildDir}/muCommander/app/bundle/", include: 'osgiaas*')
        delete fileTree(dir: "${buildDir}/muCommander/app/bundle/", include: 'jline*')
        delete fileTree(dir: "${buildDir}/muCommander/app/bundle/", include: 'mucommander-os-linux*')
        delete fileTree(dir: "${buildDir}/muCommander/app/bundle/", include: 'mucommander-os-macos*')
        delete fileTree(dir: "${buildDir}/muCommander/app/bundle/", include: 'mucommander-os-openvms*')
    }
}

task msi(dependsOn: 'winAppImage', type: Exec) {
    workingDir "${projectDir}"
    commandLine 'jpackage', \
                '--type', 'msi', \
                '--app-image', "${buildDir}/muCommander", \
                '--license-file', "${buildDir}/muCommander/license.txt", \
                '--app-version', project.version, \
                '--about-url', 'https://www.mucommander.com', \
                '--dest', "${buildDir}/distributions", \
                '--win-menu', \
                '--win-shortcut', \
                '--win-shortcut-prompt', \
                '--win-dir-chooser'
}

